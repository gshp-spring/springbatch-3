<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">
    
  
    <!-- 
         El origen de datos que apunta a la base de datos con las tablas de 
         Spring Batch. En estas tablas Spring Batch lleva un registro de todas
         las ejecuciones que se hicieron.
         El script para generar las tablas necesarias por Spring Batch se 
         encuentra dentro de spring-batch-core-xxxx.jar (en la raiz).
     -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.apache.derby.jdbc.ClientDriver"/>
        <property name="url" value="jdbc:derby://localhost:1527/springbatch"/>
        <property name="username" value="springbatch"/>
        <property name="password" value="springbatch"/>
    </bean>
    
    <!-- 
        El gestor de transacciones que se usará durante el procesamiento batch.
    -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" lazy-init="true">
            <property name="dataSource" ref="dataSource" />
    </bean>    

    <!--
        El repositorio de tareas de Spring Batch. Este bean es el encargado 
        de guardar la información de las ejecuciones en la base de datos.
    -->
    <batch:job-repository id="jobRepository" />
  
  
    <!--
        Un ejecutador de tareas. A través de esta clase es que se inicia la
        ejecución de las taras batch.
    -->
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
            <property name="jobRepository" ref="jobRepository" />
    </bean>


        
    <!--
        Una trabajo de Spring Batch. 
        Este es el bean principal de Spring Batch, que declara el trabajo batch
        que se va a ejecutar. El trabajo está compuesta de varios "pasos" (step). 
        Los pasos se ejecutan en forma secuencial.
        
        En este ejemplo, el trabajo consiste en un único paso "imprimirPorConsola".
        Este paso tiene un "itemReader" que lee planetas y los mapea a un objeto
        Planeta, y un "itemWriter" que imprimir objetos Planeta por consola.
    -->
    <batch:job id="trabajoBatch">
        <batch:step id="guardarEnArchivo">
            <batch:tasklet>
                <batch:chunk reader="planetaItemReader" writer="archivoPlanoItemWriter" commit-interval="5" />
            </batch:tasklet>
        </batch:step>
    </batch:job>

    
    <!--
        Lector de planteas. Esta reader de base de datos es una clase 
        utilitaria provista por Spring Batch. Este bean ejecuta el query "sql"
        y recorrer las filas resultantes. Cada fila es transformada con el
        "mapper" asociado. 
        En este caso se usa un mapper utilitario, que de acuerdo al alias
        indicado en cada columna del query lo asocia a un objeto Planeta.
    -->
    <bean id="planetaItemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">
        <property name="dataSource" ref="dataSource" />
        <property name="sql" value="select id_planeta as codigo, nombre as nombre, diametro as diametro, tipo as tipo, observaciones as significado from PLANETA"/>
        <property name="rowMapper">
            <bean id="planetaMapper" class="org.springframework.jdbc.core.BeanPropertyRowMapper">
                <property name="mappedClass">
                      <value type="java.lang.Class">com.curso.java.springbatch0005.Planeta</value>
                </property>
            </bean>
        </property>
    </bean>
    

    <!--
        Esta es la clase encargada de escribir los resultados de la lectura
        del "itemReader". Cada elemento leido por el "planetaItemReader" es
        procesado por este "itemWriter". 
        "archivoPlanoItemWriter" recibe un Planeta y guarda solo algunos datos
        del planeta en el archivo "planetas-resultado-demo4.txt", separada 
        cada columna por el caracter ";".
        
        El atributo "resource" indica dónde se guardará el archivo resultante.
        En este caso, será en la raiz de este mismo proyecto.        
        El atributo "lineAggregator" indica cuál será el delimitador de valores
        dentro de cada línea. 
        El atributo "fieldExtractor" es el encargado de recibir el Planeta
        (creado por "planetaItemReader") y devolver los valores que conformarán
        una línea en el archivo de texto.
    -->
    <bean id="archivoPlanoItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
        <property name="resource" value="file:planetas-resultado-demo4.txt"/>
        <property name="shouldDeleteIfExists" value="true"/>
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
                <property name="delimiter" value=";"/>
                <property name="fieldExtractor">
                    <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                        <property name="names" value="nombre,tipo"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
    
</beans>