<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd"
       >

    <!--
         El origen de datos que apunta a la base de datos con las tablas de
         Spring Batch. En estas tablas Spring Batch lleva un registro de todas
         las ejecuciones que se hicieron.
         El script para generar las tablas necesarias por Spring Batch se
         encuentra dentro de spring-batch-core-xxxx.jar (en la raiz).
     -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.apache.derby.jdbc.ClientDriver"/>
        <property name="url" value="jdbc:derby://localhost:1527/springbatch"/>
        <property name="username" value="springbatch"/>
        <property name="password" value="springbatch"/>
    </bean>
    <!--
        El gestor de transacciones que se usará durante el procesamiento batch.
    -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" lazy-init="true">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--
        El repositorio de tareas de Spring Batch. Este bean es el encargado
        de guardar la información de las ejecuciones en la base de datos.
    -->
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean"
          p:databaseType="derby"
          p:dataSource-ref="dataSource"
          p:transactionManager-ref="transactionManager"/>


    <!--
        Un ejecutador de tareas. A través de esta clase es que se inicia la
        ejecución de las taras batch.
    -->
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
    </bean>


    <!--
        Una trabajo de Spring Batch.
        Este es el bean principal de Spring Batch, que declara el trabajo batch
        que se va a ejecutar. El trabajo está compuesto de varios "pasos" (step).
        Los pasos se ejecutan en forma secuencial.

        Utilizamos en este caso el tag reducido "job" del xmlns
        http://www.springframework.org/schema/batch.

        Nuestro step está compuesto de un tasklet que tendrá un chunk con un
        reader y un writer. Además tendrá dos listeners: cabeceraHandler y consolaItemWriter.
        En estos dos listeners, se llamará al metodo que esté definido con la anotación
        @BeforeStep para pasarle el Contexto de ejecución del step.

    -->
    <batch:job id="trabajoBatch" job-repository="jobRepository" restartable="true">
        <batch:step id="imprimirPorConsola" >
            <batch:tasklet transaction-manager="transactionManager" >
                <batch:chunk reader="planetaItemReader" writer="consolaItemWriter" commit-interval="5"/>
                <batch:listeners>
                    <batch:listener ref="cabeceraHandler"/>
                    <batch:listener ref="consolaItemWriter"/>
                </batch:listeners>
            </batch:tasklet>
        </batch:step>
    </batch:job>


    <!--
        Lector de planteas. Esta reader de archivos planos es una clase
        utilitaria provista por Spring Batch. Este bean lee el archivo
        "planetas.csv". El atributo "lineMapper" indica la composicion del
        archivo (en este caso, separado por comas "," y con los nombres de
        cada una de las columnas.
        El atributo "fileSetMapper" es el encargado de convertir cada linea del
        archivo a un objeto. En este caso se utiliza una clase utilitaria de
        Spring Batch para convertir cada columna a un objeto Planeta. Esta clase
        utilitaria utiliza los nombres de columna como nombres de atributos
        en el objeto Planeta destino.

        En este ejemplo además, se define que se salteará 1 linea del procesamiento
        de registros, y que esa línea la procesara el bean cabeceraHandler. Este bean
        deberá implementar la interfaz LineCallbackHandler para manejar las líneas salteadas.
    -->

    <bean id="planetaItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
        <property name="resource" value="classpath:planetas.csv"/>
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="delimiter" value="," />
                        <property name="names" value="Codigo, Nombre, Diametro, Tipo, Significado"/>
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                        <property name="prototypeBeanName" value="planeta"/>
                    </bean>
                </property>
            </bean>
        </property>
        <!-- indicamos que se saltee 1 linea y la procese el bean que se define en la propiedad
        skippedLinesCallback-->
        <property name="linesToSkip" value="1"/>
        <property name="skippedLinesCallback" ref="cabeceraHandler"/>
    </bean>

    <!--
        Este es el bean implementado por nosotros que interpretará el registro cabecera del archivo.
        Le definimos un mapper al igual que a los registros, pero en este caso para obtener el objeto de
        tipo CabeceraArchivo.
    -->
    <bean id="cabeceraHandler" class="com.curso.java.springbatch0010.CabeceraHandler">
        <property name="lineMapper" ref="cabeceraMapper"/>
    </bean>

    <!--
        El mapper de la cabecera, utilizando clases utilitarias de spring-batch, para que que devuelva
        un bean del tipo CabeceraArchivo.
    -->
    <bean id="cabeceraMapper" class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
        <property name="lineTokenizer">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                <property name="delimiter" value="|" />
                <property name="names" value="cantidadRegistros,descripcion"/>
            </bean>
        </property>
        <property name="fieldSetMapper">
            <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                <property name="prototypeBeanName" value="cabeceraArchivo"/>
            </bean>
        </property>
    </bean>

    <!--
        Esta es la clase encargada de escribir los resultados de la lectura
        del "itemReader". Cada elemento leido por el "planetaItemReader" es
        procesado por este "itemWriter".
        Este writer obtiene del contexto la cabecera leida y la utiliza para
        mostrar por consola un mensaje descriptivo, combinando informacion de la
        cabecera y del registro
    -->
    <bean id="consolaItemWriter" class="com.curso.java.springbatch0010.ConsolaItemWriter"/>

    <!--
       Este bean es usado por "planetaItemReader" (en particular, por su
       fieldSetMapper), para convertir cada línea del archivo de origen a un
       objeto.
       Su scope TIENE que ser "prototype", ya que se necesita una instancia
       nueva por cada invocación.
    -->
    <bean id="planeta" scope="prototype" class="com.curso.java.springbatch0010.Planeta"/>

    <!--
        Este bean es el objeto que representa la cabecera del archivo recibida con sus datos.
        Lo creará el bean cabeceraHandler y lo guardará en el contexto. Lo obtendrá del contexto y lo usará
        el bean consolaItemWriter
    -->
    <bean id="cabeceraArchivo" scope="prototype" class="com.curso.java.springbatch0010.CabeceraArchivo"/>

</beans>